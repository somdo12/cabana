import React, { useEffect, useState } from "react";
import Axios from "axios";
import "../css/OrderStatus.css";
import socket from "./admin/socket-conn";
import { Link } from "react-router-dom";
import { API_BASE_URL } from "../config";

function OrderStatus() {
    const [order, setOrder] = useState(null);
    const [orderItems, setOrderItems] = useState([]);
    const [menuMap, setMenuMap] = useState({});

    /** ====== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ====== */
    useEffect(() => {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
        Axios.post(`${API_BASE_URL}/fetch`, {
            db_type: "mysql",
            store_code: "tb_menu",
            field_list: "*",
            where: "*"
        }).then((res) => {
            const map = {};
            res.data.data.forEach(menu => {
                map[menu.menu_id] = menu.menu_name;
            });
            setMenuMap(map);
        }).catch((err) => {
            console.error("üî• MENU MAP ERROR:", err.response?.data || err.message);
        });

        const orderId = localStorage.getItem("order_id");
        if (!orderId) {
            alert("‚ùå ‡ªÄ‡∫à‡∫ª‡ªâ‡∫≤‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ñ‡∫≥‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ");
            window.location.href = "/menu";
            return;
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order
        Axios.post(`${API_BASE_URL}/fetch`, {
            db_type: "mysql",
            store_code: "tb_order",
            field_list: "*",
            where: { order_id: parseInt(orderId) }
        }).then((res) => {
            if (res.data?.data?.length > 0) {
                setOrder(res.data.data[0]);
            } else {
                alert("‚ùå ‡∫ö‡ªç‡ªà‡ªÄ‡∫´‡∫±‡∫ô‡∫Ñ‡∫≥‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫™‡∫±‡ªà‡∫á‡ªÉ‡ªù‡ªà");
                window.location.href = "/menu";
            }
        }).catch(() => {
            alert("‚ùå ‡ªÇ‡∫´‡∫º‡∫î‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î");
            window.location.href = "/menu";
        });

        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î order
        Axios.post(`${API_BASE_URL}/fetch`, {
            db_type: "mysql",
            store_code: "tb_order_detail",
            field_list: "*",
            where: { order_id: parseInt(orderId) }
        }).then((res) => {
            setOrderItems(res.data.data || []);
        }).catch((err) => {
            console.error("üî• ORDER ITEMS ERROR:", err.response?.data || err.message);
        });
    }, []);

    /** ====== Socket Real-Time ====== */
    useEffect(() => {
        if (!socket) return;

        socket.on("receive_update_order_detail_status", (data) => {
            if (order?.order_id === data.order_id) {
                Axios.post(`${API_BASE_URL}/fetch`, {
                    db_type: "mysql",
                    store_code: "tb_order_detail",
                    field_list: "*",
                    where: { order_id: data.order_id }
                }).then((res) => {
                    setOrderItems(res.data.data || []);
                });
            }
        });

        socket.on("receive_update_payment_status", (data) => {
            if (order?.order_id === data.order_id) {
                setOrder((prev) => ({
                    ...prev,
                    payment_status: data.payment_status,
                    payment_type: data.payment_type || prev.payment_type
                }));
            }
        });

        return () => {
            socket.off("receive_update_order_detail_status");
            socket.off("receive_update_payment_status");
        };
    }, [order?.order_id]);

    /** ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ====== */
    const formatDate = (isoDateString) => {
        const date = new Date(isoDateString);
        return date.toLocaleString("la-LA", {
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            hour12: false
        }) + " ‡∫ô.";
    };

    /** ====== UI ====== */
    if (!order) {
        return (
            <div className="order-status-container" style={{ fontFamily: "'Noto Sans Lao', sans-serif", padding: "20px" }}>
                üîÑ ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫≥‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ...
            </div>
        );
    }

    return (
        <div className="order-status-container" style={{ fontFamily: "'Noto Sans Lao', sans-serif" }}>
            <h2>üìã ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Ñ‡∫≥‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô</h2>

            <div className="order-info">
                <p><strong>‡ªÄ‡∫•‡∫Å‡∫Ñ‡∫≥‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ:</strong> #{order.order_id}</p>
                <p><strong>‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫Å‡∫≤‡∫ô‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô:</strong> {order.payment_type}</p>
                <p><strong>‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Å‡∫≤‡∫ô‡∫à‡ªà‡∫≤‡∫ç:</strong> {order.payment_status}</p>
                <p><strong>‡ªÄ‡∫ß‡∫•‡∫≤‡∫™‡∫±‡ªà‡∫á:</strong> {formatDate(order.order_date)}</p>
                <p><strong>‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:</strong> {order.total_price.toLocaleString()} ‚Ç≠</p>
            </div>

            {orderItems.length > 0 && (
                <div className="order-items-box">
                    <div className="order-items-title">üçΩÔ∏è ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫ó‡∫µ‡ªà‡∫ó‡ªà‡∫≤‡∫ô‡∫™‡∫±‡ªà‡∫á</div>
                    {orderItems.map((item, index) => (
                        <div key={index} className="order-item">
                            <div className="order-item-name">
                                <p>{menuMap[item.menu_id] || `‡ªÄ‡∫°‡∫ô‡∫π #${item.menu_id}`} √ó {item.order_qty}</p>
                                <p><strong>‡ªù‡∫≤‡∫ç‡ªÄ‡∫´‡∫î:</strong> {item.note || '‡∫ö‡ªç‡ªà‡∫°‡∫µ'}</p>
                                <p>
                                    <span className={`status-badge status-${item.status_order}`}>
                                        {item.status_order === "preparing" ? "‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÄ‡∫Æ‡∫±‡∫î"
                                            : item.status_order === "done" ? "‡ªÄ‡∫Æ‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß"
                                                : item.status_order === "served" ? "‡∫™‡∫ª‡ªà‡∫á‡ªÅ‡∫•‡ªâ‡∫ß"
                                                    : item.status_order}
                                    </span>
                                </p>
                            </div>
                            <div className="order-item-total">
                                ‚Ç≠{item.order_total.toLocaleString()}
                            </div>
                        </div>
                    ))}
                </div>
            )}

            <Link to="/menu">
                <button className="back-to-menu-btn">‚Üê ‡∫Å‡∫±‡∫ö‡ªÑ‡∫õ‡ªú‡ªâ‡∫≤‡∫´‡∫º‡∫±‡∫Å</button>
            </Link>
        </div>
    );
}

export default OrderStatus;
