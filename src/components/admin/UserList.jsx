
// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import { ENDPOINTS } from "../../config";
// import "../../css/UserList.css";

// function UserList() {
//     const [users, setUsers] = useState([]);
//     const navigate = useNavigate();
//     const currentUser = JSON.parse(localStorage.getItem("user")); // ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ó‡∫µ‡ªà‡∫•‡ªã‡∫≠‡∫Å‡∫≠‡∫¥‡∫ô‡∫¢‡∫π‡ªà

//     // ‡ªÇ‡∫´‡∫•‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ
//     useEffect(() => {
//         fetchUsers();
//     }, []);

//     const fetchUsers = async () => {
//         try {
//             const bodyData = {
//                 db_type: "mysql",
//                 store_code: "user_privacy",
//                 field_list: "*",
//                 where: "*",
//             };
//             console.log("üîÑ ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫î‡∫∂‡∫á‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ:", bodyData);
//             const result = await axios.post(ENDPOINTS.FETCH, bodyData);
//             console.log("‚úÖ ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î:", result.data);
//             setUsers(result.data.data || []);
//         } catch (error) {
//             console.error("‚ùå ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î:", error.response || error);
//         }
//     };

//     // ‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î
//     const toggleRole = async (user) => {
//         const newRole = user.user_role === "admin" ? "staff" : "admin";
//         if (!window.confirm(`‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡∫Ç‡∫≠‡∫á ${user.user_name} ‡ªÄ‡∫õ‡∫±‡∫ô ${newRole}?`)) return;

//         try {
//             const payload = {
//                 db_type: "mysql",
//                 store_code: "user_privacy",
//                 where: { user_id: user.user_id },
//                 set: { user_role: newRole },
//             };

//             console.log("üöÄ ‡∫™‡∫ª‡ªà‡∫á payload ‡ªÑ‡∫õ /edit:", payload);
//             const response = await axios.post(ENDPOINTS.EDIT, payload);
//             console.log("üì• ‡∫ï‡∫≠‡∫ö‡∫Å‡∫±‡∫ö‡∫à‡∫≤‡∫Å API /edit:", response.data);

//             if (
//                 response.data?.affectedRows > 0 ||
//                 (response.data?.message && response.data.message.toLowerCase().includes("edited"))
//             ) {
//                 alert(`‚úÖ ‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡∫Ç‡∫≠‡∫á ${user.user_name} ‡ªÄ‡∫õ‡∫±‡∫ô ${newRole} ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î`);
//                 fetchUsers();
//             } else {
//                 alert("‚ö†Ô∏è ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡ªÑ‡∫î‡ªâ: " + JSON.stringify(response.data));
//             }
//         } catch (error) {
//             console.error("‚ùå ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î:", error.response || error);
//             alert("‚ùå ‡ªÄ‡∫Å‡∫µ‡∫î‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: " + (error.response?.data?.message || error.message));
//         }
//     };

//     // ‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ
//     const deleteUser = async (user) => {
//         console.log("Current Admin Data:", currentUser);
//         if (!window.confirm(`‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ ${user.user_name}?`)) return;

//         try {
//             const payload = {
//                 db_type: "mysql",
//                 store_code: "user_privacy",
//                 where: { user_id: user.user_id },
//             };

//             console.log("üöÄ ‡∫™‡∫ª‡ªà‡∫á payload ‡ªÑ‡∫õ /delete:", payload);
//             const response = await axios.post(ENDPOINTS.DELETE, payload);
//             console.log("üì• ‡∫ï‡∫≠‡∫ö‡∫Å‡∫±‡∫ö‡∫à‡∫≤‡∫Å API /delete:", response.data);

//             if (
//                 response.data?.affectedRows > 0 ||
//                 (response.data?.message && response.data.message.toLowerCase().includes("deleted"))
//             ) {
            
//                 const formatDate = (date) => date.toISOString().slice(0, 19).replace('T', ' ');

//                 const logPayload = {
//                     db_type: "mysql",
//                     store_code: "user_activity_log",
//                     set: {
//                         action: `‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ: ${user.user_name}`,
//                         performed_by: currentUser?.user_name || "Unknown",
//                         performed_role: currentUser?.user_role || "admin",  // ‡πÄ‡∏û‡∏¥‡πà‡∏° role
//                         target_user_id: user.user_id,  // ID ‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
//                         performed_at: formatDate(new Date()),  // ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏õ‡πá‡∏ô DATETIME
//                     },
//                 };

//                 await axios.post(ENDPOINTS.CREATE, logPayload);


//                 alert(`üóëÔ∏è ‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ ${user.user_name} ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î`);
//                 fetchUsers();
//             } else {
//                 alert("‚ö†Ô∏è ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡ªÑ‡∫î‡ªâ: " + JSON.stringify(response.data));
//             }
//         } catch (error) {
//             console.error("‚ùå ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ:", error.response || error);
//             alert("‚ùå ‡ªÄ‡∫Å‡∫µ‡∫î‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: " + (error.response?.data?.message || error.message));
//         }
//     };

//     return (
//         <div className="user-list-container noto-sans-lao">
//             <h2>üìã ‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô</h2>
//             <button
//                 className="add-user-btn"
//                 onClick={() => navigate("/admin/register")}
//             >
//                 ‚ûï ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡ªÉ‡ªù‡ªà
//             </button>
//             <table className="user-table">
//                 <thead>
//                     <tr>
//                         <th>‡∫•‡∫∞‡∫´‡∫±‡∫î</th>
//                         <th>‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ</th>
//                         <th>‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß</th>
//                         <th>‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î</th>
//                         <th>‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫°‡∫∑</th>
//                     </tr>
//                 </thead>
//                 <tbody>
//                     {users.map((u, idx) => (
//                         <tr key={idx}>
//                             <td>{u.user_id}</td>
//                             <td>{u.user_name}</td>
//                             <td>{u.email}</td>
//                             <td>{u.user_role}</td>
//                             <td>
//                                 {u.user_id !== currentUser?.id && (
//                                     <>
//                                         <button
//                                             className="role-btn"
//                                             onClick={() => toggleRole(u)}
//                                         >
//                                             üîÑ ‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î
//                                         </button>
//                                         <button
//                                             className="delete-btn"
//                                             onClick={() => deleteUser(u)}
//                                         >
//                                             üóëÔ∏è ‡∫•‡∫ª‡∫ö
//                                         </button>
//                                     </>
//                                 )}
//                             </td>
//                         </tr>
//                     ))}
//                 </tbody>
//             </table>
//         </div>
//     );
// }

// export default UserList;
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { ENDPOINTS } from "../../config";
import "../../css/UserList.css";

function UserList() {
    const [users, setUsers] = useState([]);
    const navigate = useNavigate();
    const currentUser = JSON.parse(localStorage.getItem("user")); // ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ó‡∫µ‡ªà‡∫•‡ªã‡∫≠‡∫Å‡∫≠‡∫¥‡∫ô‡∫¢‡∫π‡ªà

    useEffect(() => {
        fetchUsers();
    }, []);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const fetchUsers = async () => {
        try {
            const bodyData = {
                db_type: "mysql",
                store_code: "user_privacy",
                field_list: "*",
                where: "*",
            };
            console.log("üîÑ ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫î‡∫∂‡∫á‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ:", bodyData);
            const result = await axios.post(ENDPOINTS.FETCH, bodyData);
            console.log("‚úÖ ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î:", result.data);
            setUsers(result.data.data || []);
        } catch (error) {
            console.error("‚ùå ‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î:", error.response || error);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD HH:mm:ss
    const formatDate = (date) => {
        const pad = (n) => (n < 10 ? "0" + n : n);
        return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;
    };

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const toggleRole = async (user) => {
        const newRole = user.user_role === "admin" ? "staff" : "admin";
        if (!window.confirm(`‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡∫Ç‡∫≠‡∫á ${user.user_name} ‡ªÄ‡∫õ‡∫±‡∫ô ${newRole}?`)) return;

        try {
            const payload = {
                db_type: "mysql",
                store_code: "user_privacy",
                where: { user_id: user.user_id },
                set: { user_role: newRole },
            };

            console.log("üöÄ ‡∫™‡∫ª‡ªà‡∫á payload ‡ªÑ‡∫õ /edit:", payload);
            const response = await axios.post(ENDPOINTS.EDIT, payload);
            console.log("üì• ‡∫ï‡∫≠‡∫ö‡∫Å‡∫±‡∫ö‡∫à‡∫≤‡∫Å API /edit:", response.data);

            if (
                response.data?.affectedRows > 0 ||
                (response.data?.message && response.data.message.toLowerCase().includes("edited"))
            ) {
                alert(`‚úÖ ‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡∫Ç‡∫≠‡∫á ${user.user_name} ‡ªÄ‡∫õ‡∫±‡∫ô ${newRole} ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î`);
                fetchUsers();
            } else {
                alert("‚ö†Ô∏è ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡ªÑ‡∫î‡ªâ: " + JSON.stringify(response.data));
            }
        } catch (error) {
            console.error("‚ùå ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î:", error.response || error);
            alert("‚ùå ‡ªÄ‡∫Å‡∫µ‡∫î‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: " + (error.response?.data?.message || error.message));
        }
    };

    // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const deleteUser = async (user) => {
        console.log("Current Admin Data:", currentUser);
        if (!window.confirm(`‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ ${user.user_name}?`)) return;

        try {
            const payload = {
                db_type: "mysql",
                store_code: "user_privacy",
                where: { user_id: user.user_id },
            };

            console.log("üöÄ ‡∫™‡∫ª‡ªà‡∫á payload ‡ªÑ‡∫õ /delete:", payload);
            const response = await axios.post(ENDPOINTS.DELETE, payload);
            console.log("üì• ‡∫ï‡∫≠‡∫ö‡∫Å‡∫±‡∫ö‡∫à‡∫≤‡∫Å API /delete:", response.data);

            if (
                response.data?.affectedRows > 0 ||
                (response.data?.message && response.data.message.toLowerCase().includes("deleted"))
            ) {
                // Log ‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                const logPayload = {
                    db_type: "mysql",
                    store_code: "user_activity_log",
                    set: {
                        action: `‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ: ${user.user_name}`,
                        performed_by: currentUser?.name || "Unknown",
                        performed_role: currentUser?.role || "admin",
                        target_user_id: user.user_id,
                        performed_at: formatDate(new Date()),
                    },
                };

                await axios.post(ENDPOINTS.CREATE, logPayload);

                alert(`üóëÔ∏è ‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ ${user.user_name} ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î`);
                fetchUsers();
            } else {
                alert("‚ö†Ô∏è ‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡ªÑ‡∫î‡ªâ: " + JSON.stringify(response.data));
            }
        } catch (error) {
            console.error("‚ùå ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫•‡∫ª‡∫ö‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ:", error.response || error);
            alert("‚ùå ‡ªÄ‡∫Å‡∫µ‡∫î‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: " + (error.response?.data?.message || error.message));
        }
    };

    return (
        <div className="user-list-container noto-sans-lao">
            <h2>üìã ‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô</h2>
            <button
                className="add-user-btn"
                onClick={() => navigate("/admin/register")}
            >
                ‚ûï ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡ªÉ‡ªù‡ªà
            </button>
            <table className="user-table">
                <thead>
                    <tr>
                        <th>‡∫•‡∫∞‡∫´‡∫±‡∫î</th>
                        <th>‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ</th>
                        <th>‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß</th>
                        <th>‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î</th>
                        <th>‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫á‡∫°‡∫∑</th>
                    </tr>
                </thead>
                <tbody>
                    {users.map((u, idx) => (
                        <tr key={idx}>
                            <td>{u.user_id}</td>
                            <td>{u.user_name}</td>
                            <td>{u.email}</td>
                            <td>{u.user_role}</td>
                            <td>
                                {u.user_id !== currentUser?.id && (
                                    <>
                                        <button
                                            className="role-btn"
                                            onClick={() => toggleRole(u)}
                                        >
                                            üîÑ ‡∫õ‡ªà‡∫Ω‡∫ô‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î
                                        </button>
                                        <button
                                            className="delete-btn"
                                            onClick={() => deleteUser(u)}
                                        >
                                            üóëÔ∏è ‡∫•‡∫ª‡∫ö
                                        </button>
                                    </>
                                )}
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export default UserList;
